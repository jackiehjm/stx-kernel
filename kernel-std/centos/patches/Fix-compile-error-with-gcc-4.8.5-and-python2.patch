From e76237b80a238a3ea1faf1656fd85d9af24bd30f Mon Sep 17 00:00:00 2001
From: Shuicheng Lin <shuicheng.lin@intel.com>
Date: Wed, 12 Feb 2020 15:16:28 +0800
Subject: [PATCH] Fix compile error with gcc-4.8.5 and python2

BIT is defined as "(1UL << (nr))", and gcc-4.8.5 cannot recognize
"UL", lead to error message like below:
"
BUILDSTDERR: arch/x86/entry/entry_64.S:1199: Error: found 'L', expected: ')'
BUILDSTDERR: arch/x86/entry/entry_64.S:1199: Error: junk `L<<(0))' after expression
"
Fix it by change BIT definition the same as arch/x86/include/asm/spec_ctrl.h.

cherry-pick upstream df8794fe6840aed6ce65baf7f1e542bd3e22fb78 to
fix python2 build failure

Signed-off-by: Shuicheng Lin <shuicheng.lin@intel.com>
---
 arch/x86/include/asm/msr-index.h                 | 3 +++
 tools/perf/scripts/python/exported-sql-viewer.py | 7 -------
 2 files changed, 3 insertions(+), 7 deletions(-)

diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h
index a68b5fa..bf3474f 100644
--- a/arch/x86/include/asm/msr-index.h
+++ b/arch/x86/include/asm/msr-index.h
@@ -4,6 +4,9 @@
 
 #include <linux/bits.h>
 
+#undef BIT
+#define BIT(nr) (_AC(1,UL) << (nr))
+
 /*
  * CPU model specific register (MSR) numbers.
  *
diff --git a/tools/perf/scripts/python/exported-sql-viewer.py b/tools/perf/scripts/python/exported-sql-viewer.py
index 57afe5e..9f3c0e6 100755
--- a/tools/perf/scripts/python/exported-sql-viewer.py
+++ b/tools/perf/scripts/python/exported-sql-viewer.py
@@ -1573,7 +1573,6 @@ class SQLTableDialogDataItem():
 					return str(lower_id)
 
 	def ConvertRelativeTime(self, val):
-		print "val ", val
 		mult = 1
 		suffix = val[-2:]
 		if suffix == "ms":
@@ -1595,29 +1594,23 @@ class SQLTableDialogDataItem():
 		return str(val)
 
 	def ConvertTimeRange(self, vrange):
-		print "vrange ", vrange
 		if vrange[0] == "":
 			vrange[0] = str(self.first_time)
 		if vrange[1] == "":
 			vrange[1] = str(self.last_time)
 		vrange[0] = self.ConvertRelativeTime(vrange[0])
 		vrange[1] = self.ConvertRelativeTime(vrange[1])
-		print "vrange2 ", vrange
 		if not self.IsNumber(vrange[0]) or not self.IsNumber(vrange[1]):
 			return False
-		print "ok1"
 		beg_range = max(int(vrange[0]), self.first_time)
 		end_range = min(int(vrange[1]), self.last_time)
 		if beg_range > self.last_time or end_range < self.first_time:
 			return False
-		print "ok2"
 		vrange[0] = self.BinarySearchTime(0, self.last_id, beg_range, True)
 		vrange[1] = self.BinarySearchTime(1, self.last_id + 1, end_range, False)
-		print "vrange3 ", vrange
 		return True
 
 	def AddTimeRange(self, value, ranges):
-		print "value ", value
 		n = value.count("-")
 		if n == 1:
 			pass
-- 
2.7.4

