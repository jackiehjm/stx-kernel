From 73bb521a587baf042d5e79aa2ff4b5e973c64a7b Mon Sep 17 00:00:00 2001
From: Jiping Ma <jiping.ma2@windriver.com>
Date: Tue, 1 Mar 2022 18:42:47 -0800
Subject: [PATCH] mlx5: pci_irq: Use irq_update_affinity_hint

The StarlingX kernel was patched to deprecate irq_set_affinity_hint
by cherry-picking the patches at:
  https://lore.kernel.org/netdev/20210903152430.244937-1-nitesh@redhat.com/t/#u

These patches have been mainlined as of this writing, with the following
merge commit by Linus Torvalds:
  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=147cc5838c0f5c76e908b816e924ca378e0d4735

This commit modifies the mlx5 driver so that it uses the
irq_update_affinity_hint function instead of the irq_set_affinity_hint
function. The former only sets the hint, whereas the latter sets both
the hint and the IRQ affinity.

Please note that this is a divergence from the aforementioned patch
series, which make mlx5 use irq_set_affinity_and_hint, which currently
behaves in the same way as irq_set_affinity_hint. The intent with
diverging from mainline is to allow the user-specified IRQ affinity (via
the irqaffinity= command line argument) take effect for the IRQs
set up by the mlx5 device driver.

The mlx5 commit in mainline is accessible at:
  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7451e9ea8e2055af39afe7ff39a5f68d8ec6b98d

Signed-off-by: M. Vefa Bicakci <vefa.bicakci@windriver.com>
Signed-off-by: Jiping Ma <jiping.ma2@windriver.com>
---
 drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c b/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
index 06ea6fc..dd97f89 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/pci_irq.c
@@ -175,7 +175,7 @@ static void irq_release(struct kref *kref)
 	 * before calling it. This is why there is asymmetry with set_rmap
 	 * which should be called after alloc_irq but before request_irq.
 	 */
-	irq_set_affinity_hint(irq->irqn, NULL);
+	irq_update_affinity_hint(irq->irqn, NULL);
 	free_cpumask_var(irq->mask);
 	free_irq(irq->irqn, &irq->nh);
 	kfree(irq);
@@ -276,7 +276,7 @@ static struct mlx5_irq *irq_request(struct mlx5_irq_pool *pool, int i,
 		goto err_xa;
 	}
 	affinity_copy(irq, affinity, mlx5_irq_table_get(dev));
-	irq_set_affinity_hint(irq->irqn, irq->mask);
+	irq_update_affinity_hint(irq->irqn, irq->mask);
 	cpu_get(mlx5_irq_table_get(dev), irq->mask);
 	return irq;
 err_xa:
-- 
2.31.1

