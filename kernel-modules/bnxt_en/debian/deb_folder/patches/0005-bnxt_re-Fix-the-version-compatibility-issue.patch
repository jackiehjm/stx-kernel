From 4b2ec2164007df4b380dcf6f27b5110b7f1e3855 Mon Sep 17 00:00:00 2001
From: Jiping Ma <jiping.ma2@windriver.com>
Date: Mon, 6 Nov 2023 18:02:02 -0800
Subject: [PATCH] bnxt_re: Fix the version compatibility issue

We meet the version compatibility issue after upgrading mlnx-ofa_kernel
to 5.9. mlnx-ofa_kernel-5.5 is based on linux kernel 5.13-rc4.
mlnx-ofa_kernel-5.9 is based on linux kernel v6.0-rc5. We adapt bnxt_re
to mlnx-ofa_kernel-5.9 by referring to the following two upstream
commits and the bnxt_re-227.0.130.0 source code.

The definition of create_qp() was changed with the following commit
https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?h=v5.15-rc6&id=514aee660df493cd673154a6ba6bab745ec47b8c

IB_DEVICE_LOCAL_DMA_LKEY was removed with the following commit
https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?h=linux-6.0.y&id=e945c653c8e972d1b81a88e474d79f801b60213a

bnxt_re-220.0.12.0/main.c:1340:16: error: initialization of init \
  (*)(struct ib_qp *, struct ib_qp_init_attr *, struct ib_udata *) \
  from incompatible pointer type struct ib_qp * (*)(struct ib_pd *, \
  struct ib_qp_init_attr *, struct ib_udata *)
  [-Werror=incompatible-pointer-types]
    1340 |  .create_qp  = bnxt_re_create_qp,
         |                ^~~~~~~~~~~~~~~~~
bnxt_re-220.0.12.0/ib_verbs.c:160:11: error: IB_DEVICE_LOCAL_DMA_LKEY \
  undeclared (first use in this function); did you mean \
  IBK_LOCAL_DMA_LKEY?
    160 |         | IB_DEVICE_LOCAL_DMA_LKEY
        |           ^~~~~~~~~~~~~~~~~~~~~~~~

Signed-off-by: Jiping Ma <jiping.ma2@windriver.com>
---
 bnxt_re-220.0.12.0/Makefile   |  4 ++++
 bnxt_re-220.0.12.0/ib_verbs.c | 29 ++++++++++++-----------------
 bnxt_re-220.0.12.0/ib_verbs.h |  7 +++----
 bnxt_re-220.0.12.0/main.c     |  1 +
 4 files changed, 20 insertions(+), 21 deletions(-)

diff --git a/bnxt_re-220.0.12.0/Makefile b/bnxt_re-220.0.12.0/Makefile
index 702d4a8..e36c307 100644
--- a/bnxt_re-220.0.12.0/Makefile
+++ b/bnxt_re-220.0.12.0/Makefile
@@ -744,6 +744,10 @@ ifneq ($(shell grep "smac" $(OFA_KERNEL_PATH)/include/rdma/ib_verbs.h),)
   DISTRO_CFLAG += -DHAVE_IB_WC_SMAC
 endif
 
+ifneq ($(shell grep "ib_kernel_cap_flags" $(OFA_KERNEL_PATH)/include/rdma/ib_verbs.h),)
+  DISTRO_CFLAG += -DHAVE_IB_KERNEL_CAP_FLAGS
+endif
+
 EXTRA_CFLAGS += ${DISTRO_CFLAG} -DFPGA -g -DCONFIG_BNXT_SRIOV 		\
 		-DCONFIG_BNXT_DCB -DENABLE_DEBUGFS -DCONFIG_BNXT_RE	\
 		-DBIND_MW_FENCE_WQE -DPOST_QP1_DUMMY_WQE
diff --git a/bnxt_re-220.0.12.0/ib_verbs.c b/bnxt_re-220.0.12.0/ib_verbs.c
index 7b9e77d..24120c5 100644
--- a/bnxt_re-220.0.12.0/ib_verbs.c
+++ b/bnxt_re-220.0.12.0/ib_verbs.c
@@ -157,7 +157,9 @@ int bnxt_re_query_device(struct ib_device *ibdev,
 				    | IB_DEVICE_RC_RNR_NAK_GEN
 				    | IB_DEVICE_SHUTDOWN_PORT
 				    | IB_DEVICE_SYS_IMAGE_GUID
+#ifndef HAVE_IB_KERNEL_CAP_FLAGS
 				    | IB_DEVICE_LOCAL_DMA_LKEY
+#endif
 				    | IB_DEVICE_RESIZE_MAX_WR
 				    | IB_DEVICE_PORT_ACTIVE_EVENT
 				    | IB_DEVICE_N_NOTIFY_CQ
@@ -221,6 +223,9 @@ int bnxt_re_query_device(struct ib_device *ibdev,
 	ib_attr->sig_prot_cap = 0;
 	ib_attr->sig_guard_cap = 0;
 	ib_attr->odp_caps.general_caps = 0;
+#endif
+#ifdef HAVE_IB_KERNEL_CAP_FLAGS
+	ib_attr->kernel_cap_flags = IBK_LOCAL_DMA_LKEY;
 #endif
 	return 0;
 }
@@ -1832,7 +1837,7 @@ int bnxt_re_destroy_qp(struct ib_qp *ib_qp
 		    rdev->gsi_ctx.gsi_sqp) {
 			rc = bnxt_re_destroy_gsi_sqp(qp);
 			if (rc)
-				goto sh_fail;
+				return rc;
 		}
 		bnxt_qplib_free_hdr_buf(&rdev->qplib_res, &qp->qplib_qp);
 	}
@@ -1841,11 +1846,8 @@ int bnxt_re_destroy_qp(struct ib_qp *ib_qp
 		ib_umem_release(qp->rumem);
 	if (qp->sumem && !IS_ERR(qp->sumem))
 		ib_umem_release(qp->sumem);
-	kfree(qp);
 
 	return 0;
-sh_fail:
-	return rc;
 }
 
 static u8 __from_ib_qp_type(enum ib_qp_type type)
@@ -2605,14 +2607,15 @@ static bool bnxt_re_test_qp_limits(struct bnxt_re_dev *rdev,
 	return rc;
 }
 
-struct ib_qp *bnxt_re_create_qp(struct ib_pd *ib_pd,
+int bnxt_re_create_qp(struct ib_qp *ib_qp,
 				struct ib_qp_init_attr *qp_init_attr,
 				struct ib_udata *udata)
 {
+	struct ib_pd *ib_pd = ib_qp->pd;
 	struct bnxt_re_pd *pd = to_bnxt_re(ib_pd, struct bnxt_re_pd, ib_pd);
 	struct bnxt_qplib_dev_attr *dev_attr;
 	struct bnxt_re_dev *rdev;
-	struct bnxt_re_qp *qp;
+	struct bnxt_re_qp *qp = container_of(ib_qp, struct bnxt_re_qp, ib_qp);
 	int rc;
 
 	rdev = pd->rdev;
@@ -2621,15 +2624,9 @@ struct ib_qp *bnxt_re_create_qp(struct ib_pd *ib_pd,
 	rc = bnxt_re_test_qp_limits(rdev, qp_init_attr, dev_attr);
 	if (!rc) {
 		rc = -EINVAL;
-		goto exit;
+		goto fail;
 	}
 
-	qp = kzalloc(sizeof(*qp), GFP_KERNEL);
-	if (!qp) {
-		dev_err(rdev_to_dev(rdev), "Allocate QP failed!");
-		rc = -ENOMEM;
-		goto exit;
-	}
 	qp->rdev = rdev;
 
 	rc = bnxt_re_init_qp_attr(qp, pd, qp_init_attr, udata);
@@ -2677,7 +2674,7 @@ struct ib_qp *bnxt_re_create_qp(struct ib_pd *ib_pd,
 
 	bnxt_re_qp_info_add_qpinfo(rdev, qp);
 
-	return &qp->ib_qp;
+	return 0;
 
 qp_destroy:
 	bnxt_qplib_destroy_qp(&rdev->qplib_res, &qp->qplib_qp);
@@ -2689,9 +2686,7 @@ free_umem:
 			ib_umem_release(qp->sumem);
 	}
 fail:
-	kfree(qp);
-exit:
-	return ERR_PTR(rc);
+	return rc;
 }
 
 static int bnxt_re_modify_shadow_qp(struct bnxt_re_dev *rdev,
diff --git a/bnxt_re-220.0.12.0/ib_verbs.h b/bnxt_re-220.0.12.0/ib_verbs.h
index 5c5d3b9..257a3cb 100644
--- a/bnxt_re-220.0.12.0/ib_verbs.h
+++ b/bnxt_re-220.0.12.0/ib_verbs.h
@@ -121,9 +121,9 @@ struct bnxt_re_qp_info_entry {
 };
 
 struct bnxt_re_qp {
+	struct ib_qp		ib_qp;
 	struct list_head	list;
 	struct bnxt_re_dev	*rdev;
-	struct ib_qp		ib_qp;
 	spinlock_t		sq_lock;
 	spinlock_t		rq_lock;
 	struct bnxt_qplib_qp	qplib_qp;
@@ -333,9 +333,8 @@ DESTROY_SRQ_RET bnxt_re_destroy_srq(struct ib_srq *srq
 	);
 int bnxt_re_post_srq_recv(struct ib_srq *ib_srq, CONST_STRUCT ib_recv_wr *wr,
 			  CONST_STRUCT ib_recv_wr **bad_wr);
-struct ib_qp *bnxt_re_create_qp(struct ib_pd *pd,
-				struct ib_qp_init_attr *qp_init_attr,
-				struct ib_udata *udata);
+int bnxt_re_create_qp(struct ib_qp *qp, struct ib_qp_init_attr *qp_init_attr,
+			struct ib_udata *udata);
 int bnxt_re_modify_qp(struct ib_qp *qp, struct ib_qp_attr *qp_attr,
 		      int qp_attr_mask, struct ib_udata *udata);
 int bnxt_re_query_qp(struct ib_qp *qp, struct ib_qp_attr *qp_attr,
diff --git a/bnxt_re-220.0.12.0/main.c b/bnxt_re-220.0.12.0/main.c
index 61010bb..dcd3212 100644
--- a/bnxt_re-220.0.12.0/main.c
+++ b/bnxt_re-220.0.12.0/main.c
@@ -1416,6 +1416,7 @@ static const struct ib_device_ops bnxt_re_dev_ops = {
 #ifdef HAVE_CQ_ALLOC_IN_IB_CORE
 	INIT_RDMA_OBJ_SIZE(ib_cq, bnxt_re_cq, ib_cq),
 #endif
+	INIT_RDMA_OBJ_SIZE(ib_qp, bnxt_re_qp, ib_qp),
 #ifdef HAVE_UCONTEXT_ALLOC_IN_IB_CORE
         INIT_RDMA_OBJ_SIZE(ib_ucontext, bnxt_re_ucontext, ib_uctx),
 #endif
-- 
2.42.0

