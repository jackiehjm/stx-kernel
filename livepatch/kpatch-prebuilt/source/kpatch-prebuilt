#!/bin/bash
#
# kpatch-prebuilt framework
#
# Generate the livepatch kernel modules for std and rt kernel
# types during the packages build.
#
# Copyright (c) 2022 Wind River Systems, Inc.
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. The ASF licenses this
# file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

shopt -s nullglob
set -o pipefail

BINDIR="/usr/bin"
SRCDIR="/usr/src"
KPATCHBUILD="${BINDIR}/kpatch-build"
BASE="$(pwd)"
MODULESDIR="${BASE}/prebuilt-modules"
TESTOUTPUTDIR="${MODULESDIR}/prebuilt-test"
BUILDDIR="${BUILDDIR:-${BASE}/kpatch-prebuild}"
PATCHDIR="${BASE}/kpatch_patches"
LOGFILE="${BASE}/kpatch-prebuilt.log"
CPUS=${MAX_CPUS}
declare -a PATCHDIR_LIST
declare -a PATCH_LIST
DEBUG=0
SKIPCLEANUP=0

warn() {
        echo "ERROR: $1" >&2
}

die() {
        if [[ -z "$1" ]]; then
                msg="kpatch-prebuilt build failed"
        else
                msg="$1"
        fi

        if [[ -e "${LOGFILE}" ]]; then
                warn "${msg}. Check ${LOGFILE} for more details."
        else
                warn "${msg}."
        fi

        exit 1
}

logger() {
        local to_stdout=${1:-0}

        if [[ "${DEBUG}" -ge 1 ]] || [[ "${to_stdout}" -eq 1 ]]; then
                # Log to both stdout and the logfile
                tee -a "${LOGFILE}"
        else
                # Log only to the logfile
                cat >> "${LOGFILE}"
        fi
}

cleanup() {
	rm -f "${LOGFILE}"
	unset CACHEDIR
}

usage() {
	echo "Usage: $(basename "$0") [options]" >&2
	echo "		-h, --help              Show this help message" >&2
	echo "		-d, --debug             Enable 'xtrace' and keep scratch files" >&2
	echo "					in <LOGFILE>" >&2
	echo "		-t, --kerneltype        Select the kerneltype to build" >&2
	echo "		--skip-cleanup		Skip post-build cleanup" >&2
}

options="$(getopt -o hdt: -l "help,debug,kerneltype,skip-cleanup" -- "$@")" || die "get opt failed"

eval set -- "${options}"

while [[ $# -gt 0 ]]; do
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	-d|--debug)
		DEBUG=$((DEBUG + 1))
		if [[ ${DEBUG} -eq 1 ]]; then
			echo "DEBUG mode enabled"
		fi
		;;
	-t|--kerneltype)
		KPATCH_KERNELTYPE="$2"
		shift
		;;
	--skip-cleanup)
		echo "Skipping cleanup"
		SKIPCLEANUP=1
		;;
	*)
		[[ "$1" = "--" ]] && shift && continue
		[[ -d "$1" ]] && echo "patches directory '$1' not found"
		PATCHDIR_LIST+=("$(readlink -f "$1")")
		;;
	esac
	shift
done

if [[ "${KPATCH_KERNELTYPE}" == "rt" ]]; then
	CONFIGFILE=$(find /boot -name "config-*-amd64" | grep rt)
else
	CONFIGFILE=$(find /boot -name "config-*-amd64" | grep -v rt)
fi

CONFIGFILEBASENAME=${CONFIGFILE##*/}
ARCHVERSION=${CONFIGFILEBASENAME#config-}
KEYDIR="${SRCDIR}/kernels/${ARCHVERSION}"

if [[ ${DEBUG} -eq 1 ]]; then
	set -o xtrace
fi

# set jobs as 6 by default if there is no env variable MAX_CPUS
[[ -z "${MAX_CPUS}" ]] && CPUS=6

if [[ "${ARCHVERSION}" =~ rt ]]; then
	PATCHDIR="${PATCHDIR}/rt"
	MODULESDIR="${MODULESDIR}/rt"
else
	PATCHDIR="${PATCHDIR}/std"
	MODULESDIR="${MODULESDIR}/std"
fi

mkdir -p "${BUILDDIR}" | logger || die "Couldn't create ${BUILDDIR}"

export CACHEDIR="${BUILDDIR}"

[[ "${SKIPCLEANUP}" -eq 0 ]] && trap cleanup EXIT INT TERM HUP

cd  "${BUILDDIR}" || die

PATCH_LIST+=($(ls -A "${PATCHDIR}"))
[[ -n "${PATCH_LIST[*]}" ]] || die "No sub-directory found for livepatch in ${PATCHDIR} "

for dir in "${PATCH_LIST[@]}"; do

	if [[ "${dir}" == "test" ]]; then
		OUTPUTDIR="${TESTOUTPUTDIR}"
	else
		OUTPUTDIR="${MODULESDIR}/${dir}"
	fi

	mkdir -p "${OUTPUTDIR}" | logger || die "Couldn't create ${OUTPUTDIR}"

	echo "Build for ${dir}"
	("${KPATCHBUILD}" "-j${CPUS}" -a "${ARCHVERSION}" -c "${CONFIGFILE}" -k "${KEYDIR}" \
         -o "${OUTPUTDIR}" "${PATCHDIR}"/"${dir}"/*.patch -R) 2>&1 | logger 1 || \
         die "kpatch kernel module prebuilt failed for ${dir}."

done

[[ "${DEBUG}" -eq 0 && "${SKIPCLEANUP}" -eq 0 ]] && rm -f "${LOGFILE}"
